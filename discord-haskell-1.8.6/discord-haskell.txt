-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Write bots for Discord in Haskell
--   
--   Functions and data types to write discord bots. Official discord docs
--   <a>https://discord.com/developers/docs/reference</a>.
--   
--   See the project readme for quickstart notes
--   <a>https://github.com/aquarial/discord-haskell#discord-haskell-</a>
@package discord-haskell
@version 1.8.6


-- | Data structures pertaining to Discord Embed
module Discord.Internal.Types.Embed
createEmbed :: CreateEmbed -> Embed
data CreateEmbed
CreateEmbed :: Text -> Text -> Maybe CreateEmbedImage -> Text -> Text -> Maybe CreateEmbedImage -> Text -> [EmbedField] -> Maybe CreateEmbedImage -> Text -> Maybe CreateEmbedImage -> CreateEmbed
[createEmbedAuthorName] :: CreateEmbed -> Text
[createEmbedAuthorUrl] :: CreateEmbed -> Text
[createEmbedAuthorIcon] :: CreateEmbed -> Maybe CreateEmbedImage
[createEmbedTitle] :: CreateEmbed -> Text
[createEmbedUrl] :: CreateEmbed -> Text
[createEmbedThumbnail] :: CreateEmbed -> Maybe CreateEmbedImage
[createEmbedDescription] :: CreateEmbed -> Text
[createEmbedFields] :: CreateEmbed -> [EmbedField]
[createEmbedImage] :: CreateEmbed -> Maybe CreateEmbedImage
[createEmbedFooterText] :: CreateEmbed -> Text
[createEmbedFooterIcon] :: CreateEmbed -> Maybe CreateEmbedImage
data CreateEmbedImage
CreateEmbedImageUrl :: Text -> CreateEmbedImage
CreateEmbedImageUpload :: ByteString -> CreateEmbedImage

-- | An embed attached to a message.
data Embed
Embed :: Maybe EmbedAuthor -> Maybe Text -> Maybe Text -> Maybe EmbedThumbnail -> Maybe Text -> [EmbedField] -> Maybe EmbedImage -> Maybe EmbedFooter -> Maybe Integer -> Maybe UTCTime -> Maybe Text -> Maybe EmbedVideo -> Maybe EmbedProvider -> Embed
[embedAuthor] :: Embed -> Maybe EmbedAuthor

-- | Title of the embed
[embedTitle] :: Embed -> Maybe Text

-- | URL of embed
[embedUrl] :: Embed -> Maybe Text

-- | Thumbnail in top-right
[embedThumbnail] :: Embed -> Maybe EmbedThumbnail

-- | Description of embed
[embedDescription] :: Embed -> Maybe Text

-- | Fields of the embed
[embedFields] :: Embed -> [EmbedField]
[embedImage] :: Embed -> Maybe EmbedImage
[embedFooter] :: Embed -> Maybe EmbedFooter

-- | The embed color
[embedColor] :: Embed -> Maybe Integer

-- | The time of the embed content
[embedTimestamp] :: Embed -> Maybe UTCTime

-- | Type of embed (Always "rich" for users)
[embedType] :: Embed -> Maybe Text

-- | Only present for "video" types
[embedVideo] :: Embed -> Maybe EmbedVideo

-- | Only present for "video" types
[embedProvider] :: Embed -> Maybe EmbedProvider
data EmbedThumbnail
EmbedThumbnail :: Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Integer -> EmbedThumbnail
[embedThumbnailUrl] :: EmbedThumbnail -> Maybe Text
[embedThumbnailProxyUrl] :: EmbedThumbnail -> Maybe Text
[embedThumbnailHeight] :: EmbedThumbnail -> Maybe Integer
[embedThumbnailWidth] :: EmbedThumbnail -> Maybe Integer
data EmbedVideo
EmbedVideo :: Maybe Text -> Maybe Integer -> Maybe Integer -> EmbedVideo
[embedVideoUrl] :: EmbedVideo -> Maybe Text
[embedVideoHeight] :: EmbedVideo -> Maybe Integer
[embedVideoWidth] :: EmbedVideo -> Maybe Integer
data EmbedImage
EmbedImage :: Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Integer -> EmbedImage
[embedImageUrl] :: EmbedImage -> Maybe Text
[embedImageProxyUrl] :: EmbedImage -> Maybe Text
[embedImageHeight] :: EmbedImage -> Maybe Integer
[embedImageWidth] :: EmbedImage -> Maybe Integer
data EmbedProvider
EmbedProvider :: Maybe Text -> Maybe Text -> EmbedProvider
[embedProviderName] :: EmbedProvider -> Maybe Text
[embedProviderUrl] :: EmbedProvider -> Maybe Text
data EmbedAuthor
EmbedAuthor :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> EmbedAuthor
[embedAuthorName] :: EmbedAuthor -> Maybe Text
[embedAuthorUrl] :: EmbedAuthor -> Maybe Text
[embedAuthorIconUrl] :: EmbedAuthor -> Maybe Text
[embedAuthorProxyIconUrl] :: EmbedAuthor -> Maybe Text
data EmbedFooter
EmbedFooter :: Text -> Maybe Text -> Maybe Text -> EmbedFooter
[embedFooterText] :: EmbedFooter -> Text
[embedFooterIconUrl] :: EmbedFooter -> Maybe Text
[embedFooterProxyIconUrl] :: EmbedFooter -> Maybe Text
data EmbedField
EmbedField :: Text -> Text -> Maybe Bool -> EmbedField
[embedFieldName] :: EmbedField -> Text
[embedFieldValue] :: EmbedField -> Text
[embedFieldInline] :: EmbedField -> Maybe Bool
instance GHC.Classes.Ord Discord.Internal.Types.Embed.CreateEmbedImage
instance GHC.Classes.Eq Discord.Internal.Types.Embed.CreateEmbedImage
instance GHC.Show.Show Discord.Internal.Types.Embed.CreateEmbedImage
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedThumbnail
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedThumbnail
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedThumbnail
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedVideo
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedVideo
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedVideo
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedImage
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedImage
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedImage
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedProvider
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedProvider
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedProvider
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedAuthor
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedAuthor
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedAuthor
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedFooter
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedFooter
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedFooter
instance GHC.Classes.Ord Discord.Internal.Types.Embed.EmbedField
instance GHC.Classes.Eq Discord.Internal.Types.Embed.EmbedField
instance GHC.Show.Show Discord.Internal.Types.Embed.EmbedField
instance GHC.Classes.Ord Discord.Internal.Types.Embed.Embed
instance GHC.Classes.Eq Discord.Internal.Types.Embed.Embed
instance GHC.Show.Show Discord.Internal.Types.Embed.Embed
instance GHC.Classes.Ord Discord.Internal.Types.Embed.CreateEmbed
instance GHC.Classes.Eq Discord.Internal.Types.Embed.CreateEmbed
instance GHC.Show.Show Discord.Internal.Types.Embed.CreateEmbed
instance Data.Default.Class.Default Discord.Internal.Types.Embed.CreateEmbed
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.Embed
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.Embed
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedField
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedField
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedFooter
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedFooter
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedAuthor
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedAuthor
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedProvider
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedProvider
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedImage
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedImage
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedVideo
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedVideo
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Embed.EmbedThumbnail
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Embed.EmbedThumbnail


-- | Provides base types and utility functions needed for modules in
--   Discord.Internal.Types
module Discord.Internal.Types.Prelude

-- | Authorization token for the Discord API
data Auth
Auth :: Text -> Auth

-- | Get the raw token formatted for use with the websocket gateway
authToken :: Auth -> Text

-- | A unique integer identifier. Can be used to calculate the creation
--   date of an entity.
newtype Snowflake
Snowflake :: Word64 -> Snowflake
type ChannelId = Snowflake
type GuildId = Snowflake
type MessageId = Snowflake
type EmojiId = Snowflake
type UserId = Snowflake
type OverwriteId = Snowflake
type RoleId = Snowflake
type IntegrationId = Snowflake
type WebhookId = Snowflake
type ParentId = Snowflake

-- | Gets a creation date from a snowflake.
snowflakeCreationDate :: Snowflake -> UTCTime

-- | Default timestamp
epochTime :: UTCTime
instance GHC.Classes.Ord Discord.Internal.Types.Prelude.Auth
instance GHC.Classes.Eq Discord.Internal.Types.Prelude.Auth
instance GHC.Show.Show Discord.Internal.Types.Prelude.Auth
instance Data.Bits.Bits Discord.Internal.Types.Prelude.Snowflake
instance GHC.Real.Real Discord.Internal.Types.Prelude.Snowflake
instance GHC.Enum.Enum Discord.Internal.Types.Prelude.Snowflake
instance GHC.Real.Integral Discord.Internal.Types.Prelude.Snowflake
instance GHC.Num.Num Discord.Internal.Types.Prelude.Snowflake
instance GHC.Classes.Eq Discord.Internal.Types.Prelude.Snowflake
instance GHC.Classes.Ord Discord.Internal.Types.Prelude.Snowflake
instance GHC.Show.Show Discord.Internal.Types.Prelude.Snowflake
instance GHC.Read.Read Discord.Internal.Types.Prelude.Snowflake
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Prelude.Snowflake
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Prelude.Snowflake


-- | Data structures pertaining to Discord User
module Discord.Internal.Types.User

-- | Represents information about a user.
data User
User :: UserId -> Text -> Text -> Maybe Text -> Bool -> Bool -> Maybe Bool -> Maybe Bool -> Maybe Text -> User

-- | The user's id.
[userId] :: User -> UserId

-- | The user's username (not unique)
[userName] :: User -> Text

-- | The user's 4-digit discord-tag.
[userDiscrim] :: User -> Text

-- | The user's avatar hash.
[userAvatar] :: User -> Maybe Text

-- | User is an OAuth2 application.
[userIsBot] :: User -> Bool

-- | User is a webhook
[userIsWebhook] :: User -> Bool

-- | User has two factor authentication enabled on the account.
[userMfa] :: User -> Maybe Bool

-- | Whether the email has been verified.
[userVerified] :: User -> Maybe Bool

-- | The user's email.
[userEmail] :: User -> Maybe Text
data Webhook
Webhook :: WebhookId -> Text -> ChannelId -> Webhook
[webhookId] :: Webhook -> WebhookId
[webhookToken] :: Webhook -> Text
[webhookChannelId] :: Webhook -> ChannelId
data ConnectionObject
ConnectionObject :: Text -> Text -> Text -> Bool -> [IntegrationId] -> Bool -> Bool -> Bool -> Bool -> ConnectionObject
[connectionObjectId] :: ConnectionObject -> Text
[connectionObjectName] :: ConnectionObject -> Text
[connectionObjectType] :: ConnectionObject -> Text
[connectionObjectRevoked] :: ConnectionObject -> Bool
[connectionObjectIntegrations] :: ConnectionObject -> [IntegrationId]
[connectionObjectVerified] :: ConnectionObject -> Bool
[connectionObjectFriendSyncOn] :: ConnectionObject -> Bool
[connectionObjectShownInPresenceUpdates] :: ConnectionObject -> Bool
[connectionObjectVisibleToOthers] :: ConnectionObject -> Bool
instance GHC.Classes.Ord Discord.Internal.Types.User.User
instance GHC.Classes.Eq Discord.Internal.Types.User.User
instance GHC.Show.Show Discord.Internal.Types.User.User
instance GHC.Classes.Ord Discord.Internal.Types.User.Webhook
instance GHC.Classes.Eq Discord.Internal.Types.User.Webhook
instance GHC.Show.Show Discord.Internal.Types.User.Webhook
instance GHC.Classes.Ord Discord.Internal.Types.User.ConnectionObject
instance GHC.Classes.Eq Discord.Internal.Types.User.ConnectionObject
instance GHC.Show.Show Discord.Internal.Types.User.ConnectionObject
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.User.ConnectionObject
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.User.Webhook
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.User.User
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.User.User


-- | Data structures pertaining to Discord Channels
module Discord.Internal.Types.Channel

-- | Guild channels represent an isolated set of users and messages in a
--   Guild (Server)
data Channel

-- | A text channel in a guild.
ChannelText :: ChannelId -> GuildId -> Text -> Integer -> [Overwrite] -> Integer -> Bool -> Text -> Maybe MessageId -> Maybe ParentId -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The id of the guild.
[channelGuild] :: Channel -> GuildId

-- | The name of the guild (2 - 1000 characters).
[channelName] :: Channel -> Text

-- | The storing position of the channel.
[channelPosition] :: Channel -> Integer

-- | An array of permission <a>Overwrite</a>s
[channelPermissions] :: Channel -> [Overwrite]

-- | Seconds before a user can speak again
[channelUserRateLimit] :: Channel -> Integer

-- | Is not-safe-for-work
[channelNSFW] :: Channel -> Bool

-- | The topic of the channel. (0 - 1024 chars).
[channelTopic] :: Channel -> Text

-- | The id of the last message sent in the channel
[channelLastMessage] :: Channel -> Maybe MessageId

-- | The id of the parent channel (category)
[parentId] :: Channel -> Maybe ParentId
ChannelNews :: ChannelId -> GuildId -> Text -> Integer -> [Overwrite] -> Bool -> Text -> Maybe MessageId -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The id of the guild.
[channelGuild] :: Channel -> GuildId

-- | The name of the guild (2 - 1000 characters).
[channelName] :: Channel -> Text

-- | The storing position of the channel.
[channelPosition] :: Channel -> Integer

-- | An array of permission <a>Overwrite</a>s
[channelPermissions] :: Channel -> [Overwrite]

-- | Is not-safe-for-work
[channelNSFW] :: Channel -> Bool

-- | The topic of the channel. (0 - 1024 chars).
[channelTopic] :: Channel -> Text

-- | The id of the last message sent in the channel
[channelLastMessage] :: Channel -> Maybe MessageId
ChannelStorePage :: ChannelId -> GuildId -> Text -> Integer -> Bool -> [Overwrite] -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The id of the guild.
[channelGuild] :: Channel -> GuildId

-- | The name of the guild (2 - 1000 characters).
[channelName] :: Channel -> Text

-- | The storing position of the channel.
[channelPosition] :: Channel -> Integer

-- | Is not-safe-for-work
[channelNSFW] :: Channel -> Bool

-- | An array of permission <a>Overwrite</a>s
[channelPermissions] :: Channel -> [Overwrite]

-- | A voice channel in a guild.
ChannelVoice :: ChannelId -> GuildId -> Text -> Integer -> [Overwrite] -> Bool -> Integer -> Integer -> Maybe ParentId -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The id of the guild.
[channelGuild] :: Channel -> GuildId

-- | The name of the guild (2 - 1000 characters).
[channelName] :: Channel -> Text

-- | The storing position of the channel.
[channelPosition] :: Channel -> Integer

-- | An array of permission <a>Overwrite</a>s
[channelPermissions] :: Channel -> [Overwrite]

-- | Is not-safe-for-work
[channelNSFW] :: Channel -> Bool

-- | The bitrate (in bits) of the channel.
[channelBitRate] :: Channel -> Integer

-- | The user limit of the voice channel.
[channelUserLimit] :: Channel -> Integer

-- | The id of the parent channel (category)
[parentId] :: Channel -> Maybe ParentId

-- | DM Channels represent a one-to-one conversation between two users,
--   outside the scope of guilds
ChannelDirectMessage :: ChannelId -> [User] -> Maybe MessageId -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The <a>User</a> object(s) of the DM recipient(s).
[channelRecipients] :: Channel -> [User]

-- | The id of the last message sent in the channel
[channelLastMessage] :: Channel -> Maybe MessageId
ChannelGroupDM :: ChannelId -> [User] -> Maybe MessageId -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The <a>User</a> object(s) of the DM recipient(s).
[channelRecipients] :: Channel -> [User]

-- | The id of the last message sent in the channel
[channelLastMessage] :: Channel -> Maybe MessageId
ChannelGuildCategory :: ChannelId -> GuildId -> Text -> Integer -> [Overwrite] -> Channel

-- | The id of the channel (Will be equal to the guild if it's the
--   "general" channel).
[channelId] :: Channel -> ChannelId

-- | The id of the guild.
[channelGuild] :: Channel -> GuildId

-- | The name of the guild (2 - 1000 characters).
[channelName] :: Channel -> Text

-- | The storing position of the channel.
[channelPosition] :: Channel -> Integer

-- | An array of permission <a>Overwrite</a>s
[channelPermissions] :: Channel -> [Overwrite]

-- | If the channel is part of a guild (has a guild id field)
channelIsInGuild :: Channel -> Bool

-- | Permission overwrites for a channel.
data Overwrite
Overwrite :: OverwriteId -> Text -> Integer -> Integer -> Overwrite

-- | <tt>Role</tt> or <a>User</a> id
[overwriteId] :: Overwrite -> OverwriteId

-- | Either "role" or "member
[overwriteType] :: Overwrite -> Text

-- | Allowed permission bit set
[overwriteAllow] :: Overwrite -> Integer

-- | Denied permission bit set
[overwriteDeny] :: Overwrite -> Integer

-- | Represents information about a message in a Discord channel.
data Message
Message :: MessageId -> ChannelId -> User -> Text -> UTCTime -> Maybe UTCTime -> Bool -> Bool -> [User] -> [RoleId] -> [Attachment] -> [Embed] -> [MessageReaction] -> Maybe Nonce -> Bool -> Maybe GuildId -> Maybe MessageReference -> Maybe Message -> Message

-- | The id of the message
[messageId] :: Message -> MessageId

-- | Id of the channel the message was sent in
[messageChannel] :: Message -> ChannelId

-- | The <a>User</a> the message was sent by
[messageAuthor] :: Message -> User

-- | Contents of the message
[messageText] :: Message -> Text

-- | When the message was sent
[messageTimestamp] :: Message -> UTCTime

-- | When/if the message was edited
[messageEdited] :: Message -> Maybe UTCTime

-- | Whether this message was a TTS message
[messageTts] :: Message -> Bool

-- | Whether this message mentions everyone
[messageEveryone] :: Message -> Bool

-- | <a>User</a>s specifically mentioned in the message
[messageMentions] :: Message -> [User]

-- | <tt>Role</tt>s specifically mentioned in the message
[messageMentionRoles] :: Message -> [RoleId]

-- | Any attached files
[messageAttachments] :: Message -> [Attachment]

-- | Any embedded content
[messageEmbeds] :: Message -> [Embed]

-- | Any reactions to message
[messageReactions] :: Message -> [MessageReaction]

-- | Used for validating if a message was sent
[messageNonce] :: Message -> Maybe Nonce

-- | Whether this message is pinned
[messagePinned] :: Message -> Bool

-- | The guild the message went to
[messageGuild] :: Message -> Maybe GuildId

-- | Reference IDs of the original message
[messageReference] :: Message -> Maybe MessageReference

-- | The full original message
[referencedMessage] :: Message -> Maybe Message
data MessageReaction
MessageReaction :: Int -> Bool -> Emoji -> MessageReaction
[messageReactionCount] :: MessageReaction -> Int
[messageReactionMeIncluded] :: MessageReaction -> Bool
[messageReactionEmoji] :: MessageReaction -> Emoji

-- | Represents an emoticon (emoji)
data Emoji
Emoji :: Maybe EmojiId -> Text -> Maybe [RoleId] -> Maybe User -> Maybe Bool -> Emoji

-- | The emoji id
[emojiId] :: Emoji -> Maybe EmojiId

-- | The emoji name
[emojiName] :: Emoji -> Text

-- | Roles the emoji is active for
[emojiRoles] :: Emoji -> Maybe [RoleId]

-- | User that created this emoji
[emojiUser] :: Emoji -> Maybe User

-- | Whether this emoji is managed
[emojiManaged] :: Emoji -> Maybe Bool

-- | Represents an attached to a message file.
data Attachment
Attachment :: Snowflake -> Text -> Integer -> Text -> Text -> Maybe Integer -> Maybe Integer -> Attachment

-- | Attachment id
[attachmentId] :: Attachment -> Snowflake

-- | Name of attached file
[attachmentFilename] :: Attachment -> Text

-- | Size of file (in bytes)
[attachmentSize] :: Attachment -> Integer

-- | Source of file
[attachmentUrl] :: Attachment -> Text

-- | Proxied url of file
[attachmentProxy] :: Attachment -> Text

-- | Height of file (if image)
[attachmentHeight] :: Attachment -> Maybe Integer

-- | Width of file (if image)
[attachmentWidth] :: Attachment -> Maybe Integer
newtype Nonce
Nonce :: Text -> Nonce

-- | Represents a Message Reference
data MessageReference
MessageReference :: Maybe MessageId -> Maybe ChannelId -> Maybe GuildId -> Bool -> MessageReference

-- | id of the originating message
[referenceMessageId] :: MessageReference -> Maybe MessageId

-- | id of the originating message's channel
[referenceChannelId] :: MessageReference -> Maybe ChannelId

-- | id of the originating message's guild
[referenceGuildId] :: MessageReference -> Maybe GuildId

-- | Whether to not send if reference not exist
[failIfNotExists] :: MessageReference -> Bool
instance GHC.Classes.Ord Discord.Internal.Types.Channel.Overwrite
instance GHC.Classes.Eq Discord.Internal.Types.Channel.Overwrite
instance GHC.Show.Show Discord.Internal.Types.Channel.Overwrite
instance GHC.Classes.Ord Discord.Internal.Types.Channel.Channel
instance GHC.Classes.Eq Discord.Internal.Types.Channel.Channel
instance GHC.Show.Show Discord.Internal.Types.Channel.Channel
instance GHC.Classes.Ord Discord.Internal.Types.Channel.Emoji
instance GHC.Classes.Eq Discord.Internal.Types.Channel.Emoji
instance GHC.Show.Show Discord.Internal.Types.Channel.Emoji
instance GHC.Classes.Ord Discord.Internal.Types.Channel.MessageReaction
instance GHC.Classes.Eq Discord.Internal.Types.Channel.MessageReaction
instance GHC.Show.Show Discord.Internal.Types.Channel.MessageReaction
instance GHC.Classes.Ord Discord.Internal.Types.Channel.Attachment
instance GHC.Classes.Eq Discord.Internal.Types.Channel.Attachment
instance GHC.Show.Show Discord.Internal.Types.Channel.Attachment
instance GHC.Classes.Ord Discord.Internal.Types.Channel.Nonce
instance GHC.Classes.Eq Discord.Internal.Types.Channel.Nonce
instance GHC.Show.Show Discord.Internal.Types.Channel.Nonce
instance GHC.Classes.Ord Discord.Internal.Types.Channel.MessageReference
instance GHC.Classes.Eq Discord.Internal.Types.Channel.MessageReference
instance GHC.Show.Show Discord.Internal.Types.Channel.MessageReference
instance GHC.Classes.Ord Discord.Internal.Types.Channel.Message
instance GHC.Classes.Eq Discord.Internal.Types.Channel.Message
instance GHC.Show.Show Discord.Internal.Types.Channel.Message
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.Message
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.MessageReference
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Channel.MessageReference
instance Data.Default.Class.Default Discord.Internal.Types.Channel.MessageReference
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.Nonce
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.Attachment
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.MessageReaction
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.Emoji
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.Channel
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Channel.Channel
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Channel.Overwrite
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Channel.Overwrite


-- | Types relating to Discord Guilds (servers)
module Discord.Internal.Types.Guild

-- | Representation of a guild member.
data GuildMember
GuildMember :: User -> Maybe Text -> [Snowflake] -> UTCTime -> Bool -> Bool -> GuildMember
[memberUser] :: GuildMember -> User
[memberNick] :: GuildMember -> Maybe Text
[memberRoles] :: GuildMember -> [Snowflake]
[memberJoinedAt] :: GuildMember -> UTCTime
[memberDeaf] :: GuildMember -> Bool
[memberMute] :: GuildMember -> Bool

-- | Guilds in Discord represent a collection of users and channels into an
--   isolated <a>Server</a>
data Guild
Guild :: GuildId -> Text -> Maybe Text -> Maybe Text -> UserId -> Maybe Integer -> Text -> Maybe ChannelId -> Integer -> Maybe Bool -> Maybe ChannelId -> Integer -> Integer -> Integer -> [Role] -> [Emoji] -> [Text] -> !Integer -> Maybe Snowflake -> Guild

-- | Gulid id
[guildId] :: Guild -> GuildId

-- | Guild name (2 - 100 chars)
[guildName] :: Guild -> Text

-- | Icon hash
[guildIcon] :: Guild -> Maybe Text

-- | Splash hash
[guildSplash] :: Guild -> Maybe Text

-- | Guild owner id
[guildOwnerId] :: Guild -> UserId
[guildPermissions] :: Guild -> Maybe Integer

-- | Guild voice region
[guildRegion] :: Guild -> Text

-- | Id of afk channel
[guildAfkId] :: Guild -> Maybe ChannelId

-- | Afk timeout in seconds
[guildAfkTimeout] :: Guild -> Integer

-- | Id of embedded channel
[guildEmbedEnabled] :: Guild -> Maybe Bool

-- | Id of embedded channel
[guildEmbedChannel] :: Guild -> Maybe ChannelId

-- | Level of verification
[guildVerificationLevel] :: Guild -> Integer

-- | Level of default notifications
[guildNotification] :: Guild -> Integer
[guildExplicitFilterLevel] :: Guild -> Integer

-- | Array of <a>Role</a> objects
[guildRoles] :: Guild -> [Role]

-- | Array of <a>Emoji</a> objects
[guildEmojis] :: Guild -> [Emoji]
[guildFeatures] :: Guild -> [Text]
[guildMultiFactAuth] :: Guild -> !Integer
[guildApplicationId] :: Guild -> Maybe Snowflake
data GuildUnavailable
GuildUnavailable :: GuildId -> GuildUnavailable
[idOnceAvailable] :: GuildUnavailable -> GuildId
data GuildInfo
GuildInfo :: UTCTime -> Bool -> Integer -> [GuildMember] -> [Channel] -> GuildInfo
[guildJoinedAt] :: GuildInfo -> UTCTime
[guildLarge] :: GuildInfo -> Bool
[guildMemberCount] :: GuildInfo -> Integer
[guildMembers] :: GuildInfo -> [GuildMember]

-- | Channels in the guild (sent in GuildCreate) , guildPresences ::
--   [Presence]
[guildChannels] :: GuildInfo -> [Channel]
data PartialGuild
PartialGuild :: GuildId -> Text -> Maybe Text -> Bool -> Integer -> PartialGuild
[partialGuildId] :: PartialGuild -> GuildId
[partialGuildName] :: PartialGuild -> Text
[partialGuildIcon] :: PartialGuild -> Maybe Text
[partialGuildOwner] :: PartialGuild -> Bool
[partialGuildPermissions] :: PartialGuild -> Integer

-- | Roles represent a set of permissions attached to a group of users.
--   Roles have unique names, colors, and can be "pinned" to the side bar,
--   causing their members to be listed separately. Roles are unique per
--   guild, and can have separate permission profiles for the global
--   context (guild) and channel context.
data Role
Role :: RoleId -> Text -> Integer -> Bool -> Integer -> Integer -> Bool -> Bool -> Role

-- | The role id
[roleId] :: Role -> RoleId

-- | The role name
[roleName] :: Role -> Text

-- | Integer representation of color code
[roleColor] :: Role -> Integer

-- | If the role is pinned in the user listing
[roleHoist] :: Role -> Bool

-- | Position of this role
[rolePos] :: Role -> Integer

-- | Permission bit set
[rolePerms] :: Role -> Integer

-- | Whether this role is managed by an integration
[roleManaged] :: Role -> Bool

-- | Whether this role is mentionable
[roleMention] :: Role -> Bool

-- | VoiceRegion is only refrenced in Guild endpoints, will be moved when
--   voice support is added
data VoiceRegion
VoiceRegion :: Text -> Text -> Bool -> Bool -> Bool -> Bool -> VoiceRegion

-- | Unique id of the region
[voiceRegionId] :: VoiceRegion -> Text

-- | Name of the region
[voiceRegionName] :: VoiceRegion -> Text

-- | True if this is a VIP only server
[voiceRegionVip] :: VoiceRegion -> Bool

-- | True for the closest server to a client
[voiceRegionOptimal] :: VoiceRegion -> Bool

-- | Whether this is a deprecated region
[voiceRegionDeprecated] :: VoiceRegion -> Bool

-- | Whether this is a custom region
[voiceRegionCustom] :: VoiceRegion -> Bool

-- | Info about a Ban
data GuildBan
GuildBan :: Text -> User -> GuildBan
[guildBanReason] :: GuildBan -> Text
[guildBanUser] :: GuildBan -> User

-- | Represents a code to add a user to a guild
data Invite
Invite :: Text -> Maybe GuildId -> ChannelId -> Invite

-- | The invite code
[inviteCode] :: Invite -> Text

-- | The guild the code will invite to
[inviteGuildId] :: Invite -> Maybe GuildId

-- | The channel the code will invite to
[inviteChannelId] :: Invite -> ChannelId

-- | Invite code with additional metadata
data InviteWithMeta
InviteWithMeta :: Invite -> InviteMeta -> InviteWithMeta

-- | Additional metadata about an invite.
data InviteMeta
InviteMeta :: User -> Integer -> Integer -> Integer -> Bool -> UTCTime -> Bool -> InviteMeta

-- | The user that created the invite
[inviteCreator] :: InviteMeta -> User

-- | Number of times the invite has been used
[inviteUses] :: InviteMeta -> Integer

-- | Max number of times the invite can be used
[inviteMax] :: InviteMeta -> Integer

-- | The duration (in seconds) after which the invite expires
[inviteAge] :: InviteMeta -> Integer

-- | Whether this invite only grants temporary membership
[inviteTemp] :: InviteMeta -> Bool

-- | When the invite was created
[inviteCreated] :: InviteMeta -> UTCTime

-- | If the invite is revoked
[inviteRevoked] :: InviteMeta -> Bool

-- | Represents the behavior of a third party account link.
data Integration
Integration :: !Snowflake -> Text -> Text -> Bool -> Bool -> RoleId -> Integer -> Integer -> User -> IntegrationAccount -> UTCTime -> Integration

-- | Integration id
[integrationId] :: Integration -> !Snowflake

-- | Integration name
[integrationName] :: Integration -> Text

-- | Integration type (Twitch, Youtube, ect.)
[integrationType] :: Integration -> Text

-- | Is the integration enabled
[integrationEnabled] :: Integration -> Bool

-- | Is the integration syncing
[integrationSyncing] :: Integration -> Bool

-- | Id the integration uses for "subscribers"
[integrationRole] :: Integration -> RoleId

-- | The behavior of expiring subscribers
[integrationBehavior] :: Integration -> Integer

-- | The grace period before expiring subscribers
[integrationGrace] :: Integration -> Integer

-- | The user of the integration
[integrationOwner] :: Integration -> User

-- | The account the integration links to
[integrationAccount] :: Integration -> IntegrationAccount

-- | When the integration was last synced
[integrationSync] :: Integration -> UTCTime

-- | Represents a third party account link.
data IntegrationAccount
IntegrationAccount :: Text -> Text -> IntegrationAccount

-- | The id of the account.
[accountId] :: IntegrationAccount -> Text

-- | The name of the account.
[accountName] :: IntegrationAccount -> Text

-- | Represents an image to be used in third party sites to link to a
--   discord channel
data GuildEmbed
GuildEmbed :: Bool -> ChannelId -> GuildEmbed

-- | Whether the embed is enabled
[embedEnabled] :: GuildEmbed -> Bool

-- | The embed channel id
[embedChannel] :: GuildEmbed -> ChannelId
instance GHC.Classes.Ord Discord.Internal.Types.Guild.GuildMember
instance GHC.Classes.Eq Discord.Internal.Types.Guild.GuildMember
instance GHC.Show.Show Discord.Internal.Types.Guild.GuildMember
instance GHC.Classes.Ord Discord.Internal.Types.Guild.GuildUnavailable
instance GHC.Classes.Eq Discord.Internal.Types.Guild.GuildUnavailable
instance GHC.Show.Show Discord.Internal.Types.Guild.GuildUnavailable
instance GHC.Classes.Ord Discord.Internal.Types.Guild.GuildInfo
instance GHC.Classes.Eq Discord.Internal.Types.Guild.GuildInfo
instance GHC.Show.Show Discord.Internal.Types.Guild.GuildInfo
instance GHC.Classes.Ord Discord.Internal.Types.Guild.PartialGuild
instance GHC.Classes.Eq Discord.Internal.Types.Guild.PartialGuild
instance GHC.Show.Show Discord.Internal.Types.Guild.PartialGuild
instance GHC.Classes.Ord Discord.Internal.Types.Guild.Role
instance GHC.Classes.Eq Discord.Internal.Types.Guild.Role
instance GHC.Show.Show Discord.Internal.Types.Guild.Role
instance GHC.Classes.Ord Discord.Internal.Types.Guild.Guild
instance GHC.Classes.Eq Discord.Internal.Types.Guild.Guild
instance GHC.Show.Show Discord.Internal.Types.Guild.Guild
instance GHC.Classes.Ord Discord.Internal.Types.Guild.VoiceRegion
instance GHC.Classes.Eq Discord.Internal.Types.Guild.VoiceRegion
instance GHC.Show.Show Discord.Internal.Types.Guild.VoiceRegion
instance GHC.Classes.Ord Discord.Internal.Types.Guild.GuildBan
instance GHC.Classes.Eq Discord.Internal.Types.Guild.GuildBan
instance GHC.Show.Show Discord.Internal.Types.Guild.GuildBan
instance GHC.Classes.Ord Discord.Internal.Types.Guild.Invite
instance GHC.Classes.Eq Discord.Internal.Types.Guild.Invite
instance GHC.Show.Show Discord.Internal.Types.Guild.Invite
instance GHC.Classes.Ord Discord.Internal.Types.Guild.InviteMeta
instance GHC.Classes.Eq Discord.Internal.Types.Guild.InviteMeta
instance GHC.Show.Show Discord.Internal.Types.Guild.InviteMeta
instance GHC.Classes.Ord Discord.Internal.Types.Guild.IntegrationAccount
instance GHC.Classes.Eq Discord.Internal.Types.Guild.IntegrationAccount
instance GHC.Show.Show Discord.Internal.Types.Guild.IntegrationAccount
instance GHC.Classes.Ord Discord.Internal.Types.Guild.Integration
instance GHC.Classes.Eq Discord.Internal.Types.Guild.Integration
instance GHC.Show.Show Discord.Internal.Types.Guild.Integration
instance GHC.Classes.Ord Discord.Internal.Types.Guild.GuildEmbed
instance GHC.Classes.Eq Discord.Internal.Types.Guild.GuildEmbed
instance GHC.Show.Show Discord.Internal.Types.Guild.GuildEmbed
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.GuildEmbed
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Guild.GuildEmbed
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.Integration
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.IntegrationAccount
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.InviteWithMeta
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.InviteMeta
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.Invite
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.GuildBan
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.VoiceRegion
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.Guild
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.Role
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.PartialGuild
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.GuildInfo
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.GuildUnavailable
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Guild.GuildMember


-- | Data structures pertaining to gateway dispatch <a>Event</a>s
module Discord.Internal.Types.Events

-- | Represents possible events sent by discord. Detailed information can
--   be found at <a>https://discord.com/developers/docs/topics/gateway</a>.
data Event
Ready :: Int -> User -> [Channel] -> [GuildUnavailable] -> Text -> Event
Resumed :: [Text] -> Event
ChannelCreate :: Channel -> Event
ChannelUpdate :: Channel -> Event
ChannelDelete :: Channel -> Event
ChannelPinsUpdate :: ChannelId -> Maybe UTCTime -> Event
GuildCreate :: Guild -> GuildInfo -> Event
GuildUpdate :: Guild -> Event
GuildDelete :: GuildUnavailable -> Event
GuildBanAdd :: GuildId -> User -> Event
GuildBanRemove :: GuildId -> User -> Event
GuildEmojiUpdate :: GuildId -> [Emoji] -> Event
GuildIntegrationsUpdate :: GuildId -> Event
GuildMemberAdd :: GuildId -> GuildMember -> Event
GuildMemberRemove :: GuildId -> User -> Event
GuildMemberUpdate :: GuildId -> [RoleId] -> User -> Maybe Text -> Event
GuildMemberChunk :: GuildId -> [GuildMember] -> Event
GuildRoleCreate :: GuildId -> Role -> Event
GuildRoleUpdate :: GuildId -> Role -> Event
GuildRoleDelete :: GuildId -> RoleId -> Event
MessageCreate :: Message -> Event
MessageUpdate :: ChannelId -> MessageId -> Event
MessageDelete :: ChannelId -> MessageId -> Event
MessageDeleteBulk :: ChannelId -> [MessageId] -> Event
MessageReactionAdd :: ReactionInfo -> Event
MessageReactionRemove :: ReactionInfo -> Event
MessageReactionRemoveAll :: ChannelId -> MessageId -> Event
MessageReactionRemoveEmoji :: ReactionRemoveInfo -> Event
PresenceUpdate :: PresenceInfo -> Event
TypingStart :: TypingInfo -> Event
UserUpdate :: User -> Event

-- | VoiceStateUpdate | VoiceServerUpdate
UnknownEvent :: Text -> Object -> Event
data ReactionInfo
ReactionInfo :: UserId -> Maybe GuildId -> ChannelId -> MessageId -> Emoji -> ReactionInfo
[reactionUserId] :: ReactionInfo -> UserId
[reactionGuildId] :: ReactionInfo -> Maybe GuildId
[reactionChannelId] :: ReactionInfo -> ChannelId
[reactionMessageId] :: ReactionInfo -> MessageId
[reactionEmoji] :: ReactionInfo -> Emoji
data ReactionRemoveInfo
ReactionRemoveInfo :: ChannelId -> GuildId -> MessageId -> Emoji -> ReactionRemoveInfo
[reactionRemoveChannelId] :: ReactionRemoveInfo -> ChannelId
[reactionRemoveGuildId] :: ReactionRemoveInfo -> GuildId
[reactionRemoveMessageId] :: ReactionRemoveInfo -> MessageId
[reactionRemoveEmoji] :: ReactionRemoveInfo -> Emoji
data PresenceInfo
PresenceInfo :: UserId -> [RoleId] -> GuildId -> Text -> PresenceInfo
[presenceUserId] :: PresenceInfo -> UserId
[presenceRoles] :: PresenceInfo -> [RoleId]
[presenceGuildId] :: PresenceInfo -> GuildId
[presenceStatus] :: PresenceInfo -> Text
data TypingInfo
TypingInfo :: UserId -> ChannelId -> UTCTime -> TypingInfo
[typingUserId] :: TypingInfo -> UserId
[typingChannelId] :: TypingInfo -> ChannelId
[typingTimestamp] :: TypingInfo -> UTCTime

-- | Convert ToJSON value to FromJSON value
reparse :: (ToJSON a, FromJSON b) => a -> Parser b
eventParse :: Text -> Object -> Parser Event
instance GHC.Classes.Ord Discord.Internal.Types.Events.ReactionInfo
instance GHC.Classes.Eq Discord.Internal.Types.Events.ReactionInfo
instance GHC.Show.Show Discord.Internal.Types.Events.ReactionInfo
instance GHC.Classes.Ord Discord.Internal.Types.Events.ReactionRemoveInfo
instance GHC.Classes.Eq Discord.Internal.Types.Events.ReactionRemoveInfo
instance GHC.Show.Show Discord.Internal.Types.Events.ReactionRemoveInfo
instance GHC.Classes.Ord Discord.Internal.Types.Events.PresenceInfo
instance GHC.Classes.Eq Discord.Internal.Types.Events.PresenceInfo
instance GHC.Show.Show Discord.Internal.Types.Events.PresenceInfo
instance GHC.Classes.Ord Discord.Internal.Types.Events.TypingInfo
instance GHC.Classes.Eq Discord.Internal.Types.Events.TypingInfo
instance GHC.Show.Show Discord.Internal.Types.Events.TypingInfo
instance GHC.Classes.Eq Discord.Internal.Types.Events.Event
instance GHC.Show.Show Discord.Internal.Types.Events.Event
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Events.TypingInfo
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Events.PresenceInfo
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Events.ReactionRemoveInfo
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Events.ReactionInfo


-- | Data structures needed for interfacing with the Websocket Gateway
module Discord.Internal.Types.Gateway

-- | Represents data sent and received with Discord servers
data GatewayReceivable
Dispatch :: Event -> Integer -> GatewayReceivable
HeartbeatRequest :: Integer -> GatewayReceivable
Reconnect :: GatewayReceivable
InvalidSession :: Bool -> GatewayReceivable
Hello :: Int -> GatewayReceivable
HeartbeatAck :: GatewayReceivable
ParseError :: Text -> GatewayReceivable
data GatewaySendable
Heartbeat :: Integer -> GatewaySendable
Identify :: Auth -> Bool -> Integer -> (Int, Int) -> GatewaySendable
Resume :: Text -> Text -> Integer -> GatewaySendable
RequestGuildMembers :: RequestGuildMembersOpts -> GatewaySendable
UpdateStatus :: UpdateStatusOpts -> GatewaySendable
UpdateStatusVoice :: UpdateStatusVoiceOpts -> GatewaySendable
data RequestGuildMembersOpts
RequestGuildMembersOpts :: GuildId -> Text -> Integer -> RequestGuildMembersOpts
[requestGuildMembersOptsGuildId] :: RequestGuildMembersOpts -> GuildId
[requestGuildMembersOptsNamesStartingWith] :: RequestGuildMembersOpts -> Text
[requestGuildMembersOptsLimit] :: RequestGuildMembersOpts -> Integer
data UpdateStatusVoiceOpts
UpdateStatusVoiceOpts :: GuildId -> Maybe ChannelId -> Bool -> Bool -> UpdateStatusVoiceOpts
[updateStatusVoiceOptsGuildId] :: UpdateStatusVoiceOpts -> GuildId
[updateStatusVoiceOptsChannelId] :: UpdateStatusVoiceOpts -> Maybe ChannelId
[updateStatusVoiceOptsIsMuted] :: UpdateStatusVoiceOpts -> Bool
[updateStatusVoiceOptsIsDeaf] :: UpdateStatusVoiceOpts -> Bool
data UpdateStatusOpts
UpdateStatusOpts :: Maybe UTCTime -> Maybe Activity -> UpdateStatusType -> Bool -> UpdateStatusOpts
[updateStatusOptsSince] :: UpdateStatusOpts -> Maybe UTCTime
[updateStatusOptsGame] :: UpdateStatusOpts -> Maybe Activity
[updateStatusOptsNewStatus] :: UpdateStatusOpts -> UpdateStatusType
[updateStatusOptsAFK] :: UpdateStatusOpts -> Bool
data Activity
Activity :: Text -> ActivityType -> Maybe Text -> Activity
[activityName] :: Activity -> Text
[activityType] :: Activity -> ActivityType
[activityUrl] :: Activity -> Maybe Text
data ActivityType
ActivityTypeGame :: ActivityType
ActivityTypeStreaming :: ActivityType
ActivityTypeListening :: ActivityType
ActivityTypeCompeting :: ActivityType
activityTypeId :: ActivityType -> Int
data UpdateStatusType
UpdateStatusOnline :: UpdateStatusType
UpdateStatusDoNotDisturb :: UpdateStatusType
UpdateStatusAwayFromKeyboard :: UpdateStatusType
UpdateStatusInvisibleOffline :: UpdateStatusType
UpdateStatusOffline :: UpdateStatusType
statusString :: UpdateStatusType -> Text
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.GatewayReceivable
instance GHC.Show.Show Discord.Internal.Types.Gateway.GatewayReceivable
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.RequestGuildMembersOpts
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.RequestGuildMembersOpts
instance GHC.Show.Show Discord.Internal.Types.Gateway.RequestGuildMembersOpts
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.UpdateStatusVoiceOpts
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.UpdateStatusVoiceOpts
instance GHC.Show.Show Discord.Internal.Types.Gateway.UpdateStatusVoiceOpts
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.ActivityType
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.ActivityType
instance GHC.Show.Show Discord.Internal.Types.Gateway.ActivityType
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.Activity
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.Activity
instance GHC.Show.Show Discord.Internal.Types.Gateway.Activity
instance GHC.Enum.Enum Discord.Internal.Types.Gateway.UpdateStatusType
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.UpdateStatusType
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.UpdateStatusType
instance GHC.Show.Show Discord.Internal.Types.Gateway.UpdateStatusType
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.UpdateStatusOpts
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.UpdateStatusOpts
instance GHC.Show.Show Discord.Internal.Types.Gateway.UpdateStatusOpts
instance GHC.Classes.Ord Discord.Internal.Types.Gateway.GatewaySendable
instance GHC.Classes.Eq Discord.Internal.Types.Gateway.GatewaySendable
instance GHC.Show.Show Discord.Internal.Types.Gateway.GatewaySendable
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Types.Gateway.GatewaySendable
instance Data.Aeson.Types.FromJSON.FromJSON Discord.Internal.Types.Gateway.GatewayReceivable


-- | Provides types and encoding/decoding code. Types should be identical
--   to those provided in the Discord API documentation.
module Discord.Internal.Types

-- | A JSON "object" (key/value map).
type Object = HashMap Text Value

-- | This is the simplest representation of UTC. It consists of the day
--   number, and a time offset from midnight. Note that if a day has a leap
--   second added to it, it will have 86401 seconds.
data UTCTime
UTCTime :: Day -> DiffTime -> UTCTime

-- | the day
[utctDay] :: UTCTime -> Day

-- | the time from midnight, 0 &lt;= t &lt; 86401s (because of
--   leap-seconds)
[utctDayTime] :: UTCTime -> DiffTime


-- | Utility and base types and functions for the Discord Rest API
module Discord.Internal.Rest.Prelude

-- | The base url (Req) for API requests
baseUrl :: Url 'Https

-- | Discord requires HTTP headers for authentication.
authHeader :: Auth -> Option 'Https
(//) :: Show a => Url scheme -> a -> Url scheme
infixl 5 //

-- | Represtents a HTTP request made to an API that supplies a Json
--   response
data JsonRequest
[Delete] :: Url 'Https -> Option 'Https -> JsonRequest
[Get] :: Url 'Https -> Option 'Https -> JsonRequest
[Put] :: HttpBody a => Url 'Https -> a -> Option 'Https -> JsonRequest
[Patch] :: HttpBody a => Url 'Https -> RestIO a -> Option 'Https -> JsonRequest
[Post] :: HttpBody a => Url 'Https -> RestIO a -> Option 'Https -> JsonRequest
class Request a
majorRoute :: Request a => a -> String
jsonRequest :: Request a => a -> JsonRequest

-- | Same Monad as IO. Overwrite Req settings
newtype RestIO a
RestIO :: IO a -> RestIO a
[restIOtoIO] :: RestIO a -> IO a
instance Control.Monad.IO.Class.MonadIO Discord.Internal.Rest.Prelude.RestIO
instance GHC.Base.Monad Discord.Internal.Rest.Prelude.RestIO
instance GHC.Base.Applicative Discord.Internal.Rest.Prelude.RestIO
instance GHC.Base.Functor Discord.Internal.Rest.Prelude.RestIO
instance Network.HTTP.Req.MonadHttp Discord.Internal.Rest.Prelude.RestIO


-- | Provides actions for Webhook API interactions
module Discord.Internal.Rest.Webhook
data CreateWebhookOpts
CreateWebhookOpts :: Text -> Maybe Text -> CreateWebhookOpts
[createWebhookOptsName] :: CreateWebhookOpts -> Text
[createWebhookOptsAvatar] :: CreateWebhookOpts -> Maybe Text
data ExecuteWebhookWithTokenOpts
ExecuteWebhookWithTokenOpts :: Maybe Text -> WebhookContent -> ExecuteWebhookWithTokenOpts
[executeWebhookWithTokenOptsUsername] :: ExecuteWebhookWithTokenOpts -> Maybe Text
[executeWebhookWithTokenOptsContent] :: ExecuteWebhookWithTokenOpts -> WebhookContent
data ModifyWebhookOpts
ModifyWebhookOpts :: Maybe Text -> Maybe Text -> Maybe ChannelId -> ModifyWebhookOpts
[modifyWebhookOptsName] :: ModifyWebhookOpts -> Maybe Text
[modifyWebhookOptsAvatar] :: ModifyWebhookOpts -> Maybe Text
[modifyWebhookOptsChannelId] :: ModifyWebhookOpts -> Maybe ChannelId
data WebhookContent
WebhookContentText :: Text -> WebhookContent
WebhookContentFile :: Text -> ByteString -> WebhookContent
WebhookContentEmbeds :: [CreateEmbed] -> WebhookContent

-- | Data constructor for requests. See <a>API</a>
data WebhookRequest a
[CreateWebhook] :: ChannelId -> CreateWebhookOpts -> WebhookRequest Webhook
[GetChannelWebhooks] :: ChannelId -> WebhookRequest [Webhook]
[GetGuildWebhooks] :: GuildId -> WebhookRequest [Webhook]
[GetWebhook] :: WebhookId -> WebhookRequest Webhook
[GetWebhookWithToken] :: WebhookId -> Text -> WebhookRequest Webhook
[ModifyWebhook] :: WebhookId -> ModifyWebhookOpts -> WebhookRequest Webhook
[ModifyWebhookWithToken] :: WebhookId -> Text -> ModifyWebhookOpts -> WebhookRequest Webhook
[DeleteWebhook] :: WebhookId -> WebhookRequest ()
[DeleteWebhookWithToken] :: WebhookId -> Text -> WebhookRequest ()
[ExecuteWebhookWithToken] :: WebhookId -> Text -> ExecuteWebhookWithTokenOpts -> WebhookRequest ()
instance GHC.Classes.Ord Discord.Internal.Rest.Webhook.WebhookContent
instance GHC.Classes.Eq Discord.Internal.Rest.Webhook.WebhookContent
instance GHC.Show.Show Discord.Internal.Rest.Webhook.WebhookContent
instance GHC.Classes.Ord Discord.Internal.Rest.Webhook.ExecuteWebhookWithTokenOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Webhook.ExecuteWebhookWithTokenOpts
instance GHC.Show.Show Discord.Internal.Rest.Webhook.ExecuteWebhookWithTokenOpts
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.Webhook.WebhookRequest a)
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Webhook.ExecuteWebhookWithTokenOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Webhook.CreateWebhookOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Webhook.ModifyWebhookOpts


-- | Provides actions for Voice API interactions
module Discord.Internal.Rest.Voice

-- | Data constructor for requests. See <a>API</a>
data VoiceRequest a
[ListVoiceRegions] :: VoiceRequest [VoiceRegion]
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.Voice.VoiceRequest a)


-- | Provides actions for Channel API interactions
module Discord.Internal.Rest.User

-- | Data constructor for requests. See <a>API</a>
data UserRequest a

-- | Returns the <a>User</a> object of the requester's account. For OAuth2,
--   this requires the identify scope, which will return the object without
--   an email, and optionally the email scope, which returns the object
--   with an email.
[GetCurrentUser] :: UserRequest User

-- | Returns a <a>User</a> for a given user ID
[GetUser] :: UserId -> UserRequest User

-- | Modify user's username &amp; avatar pic
[ModifyCurrentUser] :: Text -> CurrentUserAvatar -> UserRequest User

-- | Returns a list of user <a>Guild</a> objects the current user is a
--   member of. Requires the guilds OAuth2 scope.
[GetCurrentUserGuilds] :: UserRequest [PartialGuild]

-- | Leave a guild.
[LeaveGuild] :: GuildId -> UserRequest ()

-- | Returns a list of DM <a>Channel</a> objects
[GetUserDMs] :: UserRequest [Channel]

-- | Create a new DM channel with a user. Returns a DM <a>Channel</a>
--   object.
[CreateDM] :: UserId -> UserRequest Channel
[GetUserConnections] :: UserRequest [ConnectionObject]
parseCurrentUserAvatar :: ByteString -> Either Text CurrentUserAvatar

-- | Formatted avatar data
--   <a>https://discord.com/developers/docs/resources/user#avatar-data</a>
data CurrentUserAvatar
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.User.UserRequest a)


-- | Provides actions for Channel API interactions
module Discord.Internal.Rest.Invite

-- | Data constructor for requests. See <a>API</a>
data InviteRequest a

-- | Get invite for given code
[GetInvite] :: Text -> InviteRequest Invite

-- | Delete invite by code
[DeleteInvite] :: Text -> InviteRequest Invite
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.Invite.InviteRequest a)


-- | Provide HTTP primitives
module Discord.Internal.Rest.HTTP
restLoop :: Auth -> Chan (String, JsonRequest, MVar (Either RestCallInternalException ByteString)) -> Chan Text -> IO ()
class Request a
majorRoute :: Request a => a -> String
jsonRequest :: Request a => a -> JsonRequest

-- | Represtents a HTTP request made to an API that supplies a Json
--   response
data JsonRequest
[Delete] :: Url 'Https -> Option 'Https -> JsonRequest
[Get] :: Url 'Https -> Option 'Https -> JsonRequest
[Put] :: HttpBody a => Url 'Https -> a -> Option 'Https -> JsonRequest
[Patch] :: HttpBody a => Url 'Https -> RestIO a -> Option 'Https -> JsonRequest
[Post] :: HttpBody a => Url 'Https -> RestIO a -> Option 'Https -> JsonRequest
data RestCallInternalException
RestCallInternalErrorCode :: Int -> ByteString -> ByteString -> RestCallInternalException
RestCallInternalNoParse :: String -> ByteString -> RestCallInternalException
RestCallInternalHttpException :: HttpException -> RestCallInternalException
instance GHC.Show.Show Discord.Internal.Rest.HTTP.RestCallInternalException
instance GHC.Show.Show Discord.Internal.Rest.HTTP.RequestResponse


-- | Provides actions for Channel API interactions
module Discord.Internal.Rest.Guild

-- | Data constructor for requests. See <a>API</a>
data GuildRequest a
[CreateGuild] :: CreateGuildOpts -> GuildRequest Guild

-- | Returns the new <a>Guild</a> object for the given id
[GetGuild] :: GuildId -> GuildRequest Guild

-- | Modify a guild's settings. Returns the updated <a>Guild</a> object on
--   success. Fires a Guild Update <a>Event</a>.
[ModifyGuild] :: GuildId -> ModifyGuildOpts -> GuildRequest Guild

-- | Delete a guild permanently. User must be owner. Fires a Guild Delete
--   <a>Event</a>.
[DeleteGuild] :: GuildId -> GuildRequest ()

-- | Returns a list of guild <a>Channel</a> objects
[GetGuildChannels] :: GuildId -> GuildRequest [Channel]

-- | Create a new <a>Channel</a> object for the guild. Requires
--   <tt>MANAGE_CHANNELS</tt> permission. Returns the new <a>Channel</a>
--   object on success. Fires a Channel Create <a>Event</a>
[CreateGuildChannel] :: GuildId -> Text -> [Overwrite] -> CreateGuildChannelOpts -> GuildRequest Channel

-- | Modify the positions of a set of channel objects for the guild.
--   Requires <tt>MANAGE_CHANNELS</tt> permission. Returns a list of all of
--   the guild's <a>Channel</a> objects on success. Fires multiple Channel
--   Update <a>Event</a>s.
[ModifyGuildChannelPositions] :: GuildId -> [(ChannelId, Int)] -> GuildRequest [Channel]

-- | Returns a guild <tt>Member</tt> object for the specified user
[GetGuildMember] :: GuildId -> UserId -> GuildRequest GuildMember

-- | Returns a list of guild <tt>Member</tt> objects that are members of
--   the guild.
[ListGuildMembers] :: GuildId -> GuildMembersTiming -> GuildRequest [GuildMember]

-- | Adds a user to the guild, provided you have a valid oauth2 access
--   token for the user with the guilds.join scope. Returns the guild
--   <tt>Member</tt> as the body. Fires a Guild Member Add <a>Event</a>.
--   Requires the bot to have the CREATE_INSTANT_INVITE permission.
[AddGuildMember] :: GuildId -> UserId -> AddGuildMemberOpts -> GuildRequest ()

-- | Modify attributes of a guild <tt>Member</tt>. Fires a Guild Member
--   Update <a>Event</a>.
[ModifyGuildMember] :: GuildId -> UserId -> ModifyGuildMemberOpts -> GuildRequest ()

-- | Modify the nickname of the current user
[ModifyCurrentUserNick] :: GuildId -> Text -> GuildRequest ()

-- | Add a member to a guild role. Requires <tt>MANAGE_ROLES</tt>
--   permission.
[AddGuildMemberRole] :: GuildId -> UserId -> RoleId -> GuildRequest ()

-- | Remove a member from a guild role. Requires <tt>MANAGE_ROLES</tt>
--   permission.
[RemoveGuildMemberRole] :: GuildId -> UserId -> RoleId -> GuildRequest ()

-- | Remove a member from a guild. Requires <tt>KICK_MEMBER</tt>
--   permission. Fires a Guild Member Remove <a>Event</a>.
[RemoveGuildMember] :: GuildId -> UserId -> GuildRequest ()

-- | Returns a list of <tt>Ban</tt> objects for users that are banned from
--   this guild. Requires the <tt>BAN_MEMBERS</tt> permission
[GetGuildBans] :: GuildId -> GuildRequest [GuildBan]

-- | Returns a <tt>Ban</tt> object for the user banned from this guild.
--   Requires the <tt>BAN_MEMBERS</tt> permission
[GetGuildBan] :: GuildId -> UserId -> GuildRequest GuildBan

-- | Create a guild ban, and optionally Delete previous messages sent by
--   the banned user. Requires the <tt>BAN_MEMBERS</tt> permission. Fires a
--   Guild Ban Add <a>Event</a>.
[CreateGuildBan] :: GuildId -> UserId -> CreateGuildBanOpts -> GuildRequest ()

-- | Remove the ban for a user. Requires the <tt>BAN_MEMBERS</tt>
--   permissions. Fires a Guild Ban Remove <a>Event</a>.
[RemoveGuildBan] :: GuildId -> UserId -> GuildRequest ()

-- | Returns a list of <a>Role</a> objects for the guild. Requires the
--   <tt>MANAGE_ROLES</tt> permission
[GetGuildRoles] :: GuildId -> GuildRequest [Role]

-- | Create a new <a>Role</a> for the guild. Requires the
--   <tt>MANAGE_ROLES</tt> permission. Returns the new role object on
--   success. Fires a Guild Role Create <a>Event</a>.
[CreateGuildRole] :: GuildId -> ModifyGuildRoleOpts -> GuildRequest Role

-- | Modify the positions of a set of role objects for the guild. Requires
--   the <tt>MANAGE_ROLES</tt> permission. Returns a list of all of the
--   guild's <a>Role</a> objects on success. Fires multiple Guild Role
--   Update <a>Event</a>s.
[ModifyGuildRolePositions] :: GuildId -> [(RoleId, Integer)] -> GuildRequest [Role]

-- | Modify a guild role. Requires the <tt>MANAGE_ROLES</tt> permission.
--   Returns the updated <a>Role</a> on success. Fires a Guild Role Update
--   <a>Event</a>s.
[ModifyGuildRole] :: GuildId -> RoleId -> ModifyGuildRoleOpts -> GuildRequest Role

-- | Delete a guild role. Requires the <tt>MANAGE_ROLES</tt> permission.
--   Fires a Guild Role Delete <a>Event</a>.
[DeleteGuildRole] :: GuildId -> RoleId -> GuildRequest ()

-- | Returns an object with one <tt>pruned</tt> key indicating the number
--   of members that would be removed in a prune operation. Requires the
--   <tt>KICK_MEMBERS</tt> permission.
[GetGuildPruneCount] :: GuildId -> Integer -> GuildRequest Object

-- | Begin a prune operation. Requires the <tt>KICK_MEMBERS</tt>
--   permission. Returns an object with one <tt>pruned</tt> key indicating
--   the number of members that were removed in the prune operation. Fires
--   multiple Guild Member Remove <tt>Events</tt>.
[BeginGuildPrune] :: GuildId -> Integer -> GuildRequest Object

-- | Returns a list of <a>VoiceRegion</a> objects for the guild. Unlike the
--   similar /voice route, this returns VIP servers when the guild is
--   VIP-enabled.
[GetGuildVoiceRegions] :: GuildId -> GuildRequest [VoiceRegion]

-- | Returns a list of <a>Invite</a> objects for the guild. Requires the
--   <tt>MANAGE_GUILD</tt> permission.
[GetGuildInvites] :: GuildId -> GuildRequest [Invite]

-- | Return a list of <a>Integration</a> objects for the guild. Requires
--   the <tt>MANAGE_GUILD</tt> permission.
[GetGuildIntegrations] :: GuildId -> GuildRequest [Integration]

-- | Attach an <a>Integration</a> object from the current user to the
--   guild. Requires the <tt>MANAGE_GUILD</tt> permission. Fires a Guild
--   Integrations Update <a>Event</a>.
[CreateGuildIntegration] :: GuildId -> IntegrationId -> CreateGuildIntegrationOpts -> GuildRequest ()

-- | Modify the behavior and settings of a <a>Integration</a> object for
--   the guild. Requires the <tt>MANAGE_GUILD</tt> permission. Fires a
--   Guild Integrations Update <a>Event</a>.
[ModifyGuildIntegration] :: GuildId -> IntegrationId -> ModifyGuildIntegrationOpts -> GuildRequest ()

-- | Delete the attached <a>Integration</a> object for the guild. Requires
--   the <tt>MANAGE_GUILD</tt> permission. Fires a Guild Integrations
--   Update <a>Event</a>.
[DeleteGuildIntegration] :: GuildId -> IntegrationId -> GuildRequest ()

-- | Sync an <a>Integration</a>. Requires the <tt>MANAGE_GUILD</tt>
--   permission.
[SyncGuildIntegration] :: GuildId -> IntegrationId -> GuildRequest ()

-- | Returns the <a>GuildEmbed</a> object. Requires the
--   <tt>MANAGE_GUILD</tt> permission.
[GetGuildEmbed] :: GuildId -> GuildRequest GuildEmbed

-- | Modify a <a>GuildEmbed</a> object for the guild. All attributes may be
--   passed in with JSON and modified. Requires the <tt>MANAGE_GUILD</tt>
--   permission. Returns the updated <a>GuildEmbed</a> object.
[ModifyGuildEmbed] :: GuildId -> GuildEmbed -> GuildRequest GuildEmbed

-- | Vanity URL
[GetGuildVanityURL] :: GuildId -> GuildRequest Text
data CreateGuildChannelOpts
CreateGuildChannelOptsText :: Maybe Text -> Maybe Integer -> Maybe Bool -> Maybe ChannelId -> CreateGuildChannelOpts
[createGuildChannelOptsTopic] :: CreateGuildChannelOpts -> Maybe Text
[createGuildChannelOptsUserMessageRateDelay] :: CreateGuildChannelOpts -> Maybe Integer
[createGuildChannelOptsIsNSFW] :: CreateGuildChannelOpts -> Maybe Bool
[createGuildChannelOptsCategoryId] :: CreateGuildChannelOpts -> Maybe ChannelId
CreateGuildChannelOptsVoice :: Maybe Integer -> Maybe Integer -> Maybe ChannelId -> CreateGuildChannelOpts
[createGuildChannelOptsBitrate] :: CreateGuildChannelOpts -> Maybe Integer
[createGuildChannelOptsMaxUsers] :: CreateGuildChannelOpts -> Maybe Integer
[createGuildChannelOptsCategoryId] :: CreateGuildChannelOpts -> Maybe ChannelId
CreateGuildChannelOptsCategory :: CreateGuildChannelOpts
data CreateGuildOpts
CreateGuildOpts :: Text -> [Channel] -> CreateGuildOpts
[createGuildOptsName] :: CreateGuildOpts -> Text
[createGuildOptsChannels] :: CreateGuildOpts -> [Channel]

-- | 
--   <a>https://discord.com/developers/docs/resources/guild#modify-guild</a>
data ModifyGuildOpts
ModifyGuildOpts :: Maybe Text -> Maybe ChannelId -> Maybe Text -> Maybe UserId -> ModifyGuildOpts
[modifyGuildOptsName] :: ModifyGuildOpts -> Maybe Text
[modifyGuildOptsAFKChannelId] :: ModifyGuildOpts -> Maybe ChannelId
[modifyGuildOptsIcon] :: ModifyGuildOpts -> Maybe Text
[modifyGuildOptsOwnerId] :: ModifyGuildOpts -> Maybe UserId
data AddGuildMemberOpts
AddGuildMemberOpts :: Text -> Maybe Text -> Maybe [RoleId] -> Maybe Bool -> Maybe Bool -> AddGuildMemberOpts
[addGuildMemberOptsAccessToken] :: AddGuildMemberOpts -> Text
[addGuildMemberOptsNickname] :: AddGuildMemberOpts -> Maybe Text
[addGuildMemberOptsRoles] :: AddGuildMemberOpts -> Maybe [RoleId]
[addGuildMemberOptsIsMuted] :: AddGuildMemberOpts -> Maybe Bool
[addGuildMemberOptsIsDeafened] :: AddGuildMemberOpts -> Maybe Bool
data ModifyGuildMemberOpts
ModifyGuildMemberOpts :: Maybe Text -> Maybe [RoleId] -> Maybe Bool -> Maybe Bool -> Maybe ChannelId -> ModifyGuildMemberOpts
[modifyGuildMemberOptsNickname] :: ModifyGuildMemberOpts -> Maybe Text
[modifyGuildMemberOptsRoles] :: ModifyGuildMemberOpts -> Maybe [RoleId]
[modifyGuildMemberOptsIsMuted] :: ModifyGuildMemberOpts -> Maybe Bool
[modifyGuildMemberOptsIsDeafened] :: ModifyGuildMemberOpts -> Maybe Bool
[modifyGuildMemberOptsMoveToChannel] :: ModifyGuildMemberOpts -> Maybe ChannelId
data GuildMembersTiming
GuildMembersTiming :: Maybe Int -> Maybe UserId -> GuildMembersTiming
[guildMembersTimingLimit] :: GuildMembersTiming -> Maybe Int
[guildMembersTimingAfter] :: GuildMembersTiming -> Maybe UserId
data CreateGuildBanOpts
CreateGuildBanOpts :: Maybe Int -> Maybe Text -> CreateGuildBanOpts
[createGuildBanOptsDeleteLastNMessages] :: CreateGuildBanOpts -> Maybe Int
[createGuildBanOptsReason] :: CreateGuildBanOpts -> Maybe Text
data ModifyGuildRoleOpts
ModifyGuildRoleOpts :: Maybe Text -> Maybe Integer -> Maybe Integer -> Maybe Bool -> Maybe Bool -> ModifyGuildRoleOpts
[modifyGuildRoleOptsName] :: ModifyGuildRoleOpts -> Maybe Text
[modifyGuildRoleOptsPermissions] :: ModifyGuildRoleOpts -> Maybe Integer
[modifyGuildRoleOptsColor] :: ModifyGuildRoleOpts -> Maybe Integer
[modifyGuildRoleOptsSeparateSidebar] :: ModifyGuildRoleOpts -> Maybe Bool
[modifyGuildRoleOptsMentionable] :: ModifyGuildRoleOpts -> Maybe Bool
data CreateGuildIntegrationOpts
CreateGuildIntegrationOpts :: Text -> CreateGuildIntegrationOpts
[createGuildIntegrationOptsType] :: CreateGuildIntegrationOpts -> Text
data ModifyGuildIntegrationOpts
ModifyGuildIntegrationOpts :: Integer -> Integer -> Bool -> ModifyGuildIntegrationOpts
[modifyGuildIntegrationOptsExpireBehavior] :: ModifyGuildIntegrationOpts -> Integer
[modifyGuildIntegrationOptsExpireGraceSeconds] :: ModifyGuildIntegrationOpts -> Integer
[modifyGuildIntegrationOptsEmoticonsEnabled] :: ModifyGuildIntegrationOpts -> Bool
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.CreateGuildOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.CreateGuildOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.CreateGuildOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.ModifyGuildIntegrationOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.ModifyGuildIntegrationOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.ModifyGuildIntegrationOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.CreateGuildIntegrationOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.CreateGuildIntegrationOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.CreateGuildIntegrationOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.CreateGuildBanOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.CreateGuildBanOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.CreateGuildBanOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.ModifyGuildRoleOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.ModifyGuildRoleOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.ModifyGuildRoleOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.AddGuildMemberOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.AddGuildMemberOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.AddGuildMemberOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.ModifyGuildMemberOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.ModifyGuildMemberOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.ModifyGuildMemberOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.CreateGuildChannelOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.CreateGuildChannelOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.CreateGuildChannelOpts
instance GHC.Classes.Ord Discord.Internal.Rest.Guild.ModifyGuildOpts
instance GHC.Classes.Eq Discord.Internal.Rest.Guild.ModifyGuildOpts
instance GHC.Show.Show Discord.Internal.Rest.Guild.ModifyGuildOpts
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.Guild.GuildRequest a)
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.ModifyGuildOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.ModifyGuildMemberOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.AddGuildMemberOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.ModifyGuildRoleOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.CreateGuildBanOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.CreateGuildIntegrationOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.ModifyGuildIntegrationOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Guild.CreateGuildOpts


-- | Provides actions for Channel API interactions
module Discord.Internal.Rest.Emoji

-- | Data constructor for requests. See <a>API</a>
data EmojiRequest a

-- | List of emoji objects for the given guild. Requires MANAGE_EMOJIS
--   permission.
[ListGuildEmojis] :: GuildId -> EmojiRequest [Emoji]

-- | Emoji object for the given guild and emoji ID
[GetGuildEmoji] :: GuildId -> EmojiId -> EmojiRequest Emoji

-- | Create a new guild emoji (static&amp;animated). Requires MANAGE_EMOJIS
--   permission.
[CreateGuildEmoji] :: GuildId -> Text -> EmojiImageParsed -> EmojiRequest Emoji

-- | Requires MANAGE_EMOJIS permission
[ModifyGuildEmoji] :: GuildId -> EmojiId -> ModifyGuildEmojiOpts -> EmojiRequest Emoji

-- | Requires MANAGE_EMOJIS permission
[DeleteGuildEmoji] :: GuildId -> EmojiId -> EmojiRequest ()
data ModifyGuildEmojiOpts
ModifyGuildEmojiOpts :: Text -> [RoleId] -> ModifyGuildEmojiOpts
[modifyGuildEmojiName] :: ModifyGuildEmojiOpts -> Text
[modifyGuildEmojiRoles] :: ModifyGuildEmojiOpts -> [RoleId]
parseEmojiImage :: ByteString -> Either Text EmojiImageParsed
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.Emoji.EmojiRequest a)
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Emoji.ModifyGuildEmojiOpts


-- | Provides actions for Channel API interactions
module Discord.Internal.Rest.Channel

-- | Data constructor for requests. See <a>API</a>
data ChannelRequest a

-- | Gets a channel by its id.
[GetChannel] :: ChannelId -> ChannelRequest Channel

-- | Edits channels options.
[ModifyChannel] :: ChannelId -> ModifyChannelOpts -> ChannelRequest Channel

-- | Deletes a channel if its id doesn't equal to the id of guild.
[DeleteChannel] :: ChannelId -> ChannelRequest Channel

-- | Gets a messages from a channel with limit of 100 per request.
[GetChannelMessages] :: ChannelId -> (Int, MessageTiming) -> ChannelRequest [Message]

-- | Gets a message in a channel by its id.
[GetChannelMessage] :: (ChannelId, MessageId) -> ChannelRequest Message

-- | Sends a message to a channel.
[CreateMessage] :: ChannelId -> Text -> ChannelRequest Message

-- | Sends a message with an Embed to a channel.
[CreateMessageEmbed] :: ChannelId -> Text -> CreateEmbed -> ChannelRequest Message

-- | Sends a message with a file to a channel.
[CreateMessageUploadFile] :: ChannelId -> Text -> ByteString -> ChannelRequest Message

-- | Sends a message with granular controls.
[CreateMessageDetailed] :: ChannelId -> MessageDetailedOpts -> ChannelRequest Message

-- | Add an emoji reaction to a message. ID must be present for custom
--   emoji
[CreateReaction] :: (ChannelId, MessageId) -> Text -> ChannelRequest ()

-- | Remove a Reaction this bot added
[DeleteOwnReaction] :: (ChannelId, MessageId) -> Text -> ChannelRequest ()

-- | Remove a Reaction someone else added
[DeleteUserReaction] :: (ChannelId, MessageId) -> UserId -> Text -> ChannelRequest ()

-- | Deletes all reactions of a single emoji on a message
[DeleteSingleReaction] :: (ChannelId, MessageId) -> Text -> ChannelRequest ()

-- | List of users that reacted with this emoji
[GetReactions] :: (ChannelId, MessageId) -> Text -> (Int, ReactionTiming) -> ChannelRequest [User]

-- | Delete all reactions on a message
[DeleteAllReactions] :: (ChannelId, MessageId) -> ChannelRequest ()

-- | Edits a message content.
[EditMessage] :: (ChannelId, MessageId) -> Text -> Maybe CreateEmbed -> ChannelRequest Message

-- | Deletes a message.
[DeleteMessage] :: (ChannelId, MessageId) -> ChannelRequest ()

-- | Deletes a group of messages.
[BulkDeleteMessage] :: (ChannelId, [MessageId]) -> ChannelRequest ()

-- | Edits a permission overrides for a channel.
[EditChannelPermissions] :: ChannelId -> OverwriteId -> ChannelPermissionsOpts -> ChannelRequest ()

-- | Gets all instant invites to a channel.
[GetChannelInvites] :: ChannelId -> ChannelRequest Object

-- | Creates an instant invite to a channel.
[CreateChannelInvite] :: ChannelId -> ChannelInviteOpts -> ChannelRequest Invite

-- | Deletes a permission override from a channel.
[DeleteChannelPermission] :: ChannelId -> OverwriteId -> ChannelRequest ()

-- | Sends a typing indicator a channel which lasts 10 seconds.
[TriggerTypingIndicator] :: ChannelId -> ChannelRequest ()

-- | Gets all pinned messages of a channel.
[GetPinnedMessages] :: ChannelId -> ChannelRequest [Message]

-- | Pins a message.
[AddPinnedMessage] :: (ChannelId, MessageId) -> ChannelRequest ()

-- | Unpins a message.
[DeletePinnedMessage] :: (ChannelId, MessageId) -> ChannelRequest ()

-- | Adds a recipient to a Group DM using their access token
[GroupDMAddRecipient] :: ChannelId -> GroupDMAddRecipientOpts -> ChannelRequest ()

-- | Removes a recipient from a Group DM
[GroupDMRemoveRecipient] :: ChannelId -> UserId -> ChannelRequest ()

-- | Data constructor for CreateMessageDetailed requests.
data MessageDetailedOpts
MessageDetailedOpts :: Text -> Bool -> Maybe CreateEmbed -> Maybe (Text, ByteString) -> Maybe AllowedMentions -> Maybe MessageReference -> MessageDetailedOpts
[messageDetailedContent] :: MessageDetailedOpts -> Text
[messageDetailedTTS] :: MessageDetailedOpts -> Bool
[messageDetailedEmbed] :: MessageDetailedOpts -> Maybe CreateEmbed
[messageDetailedFile] :: MessageDetailedOpts -> Maybe (Text, ByteString)
[messageDetailedAllowedMentions] :: MessageDetailedOpts -> Maybe AllowedMentions
[messageDetailedReference] :: MessageDetailedOpts -> Maybe MessageReference

-- | Data constructor for a part of MessageDetailedOpts.
data AllowedMentions
AllowedMentions :: Bool -> Bool -> Bool -> [UserId] -> [RoleId] -> Bool -> AllowedMentions
[mentionEveryone] :: AllowedMentions -> Bool
[mentionUsers] :: AllowedMentions -> Bool
[mentionRoles] :: AllowedMentions -> Bool
[mentionUserIds] :: AllowedMentions -> [UserId]
[mentionRoleIds] :: AllowedMentions -> [RoleId]
[mentionRepliedUser] :: AllowedMentions -> Bool

-- | Data constructor for GetReaction requests
data ReactionTiming
BeforeReaction :: MessageId -> ReactionTiming
AfterReaction :: MessageId -> ReactionTiming
LatestReaction :: ReactionTiming

-- | Data constructor for GetChannelMessages requests. See
--   <a>https://discord.com/developers/docs/resources/channel#get-channel-messages</a>
data MessageTiming
AroundMessage :: MessageId -> MessageTiming
BeforeMessage :: MessageId -> MessageTiming
AfterMessage :: MessageId -> MessageTiming
LatestMessages :: MessageTiming
data ChannelInviteOpts
ChannelInviteOpts :: Maybe Integer -> Maybe Integer -> Maybe Bool -> Maybe Bool -> ChannelInviteOpts
[channelInviteOptsMaxAgeSeconds] :: ChannelInviteOpts -> Maybe Integer
[channelInviteOptsMaxUsages] :: ChannelInviteOpts -> Maybe Integer
[channelInviteOptsIsTemporary] :: ChannelInviteOpts -> Maybe Bool
[channelInviteOptsDontReuseSimilarInvite] :: ChannelInviteOpts -> Maybe Bool
data ModifyChannelOpts
ModifyChannelOpts :: Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Integer -> Maybe Integer -> Maybe [Overwrite] -> Maybe ChannelId -> ModifyChannelOpts
[modifyChannelName] :: ModifyChannelOpts -> Maybe Text
[modifyChannelPosition] :: ModifyChannelOpts -> Maybe Integer
[modifyChannelTopic] :: ModifyChannelOpts -> Maybe Text
[modifyChannelNSFW] :: ModifyChannelOpts -> Maybe Bool
[modifyChannelBitrate] :: ModifyChannelOpts -> Maybe Integer
[modifyChannelUserRateLimit] :: ModifyChannelOpts -> Maybe Integer
[modifyChannelPermissionOverwrites] :: ModifyChannelOpts -> Maybe [Overwrite]
[modifyChannelParentId] :: ModifyChannelOpts -> Maybe ChannelId
data ChannelPermissionsOpts
ChannelPermissionsOpts :: Integer -> Integer -> ChannelPermissionsOptsType -> ChannelPermissionsOpts
[channelPermissionsOptsAllow] :: ChannelPermissionsOpts -> Integer
[channelPermissionsOptsDeny] :: ChannelPermissionsOpts -> Integer
[channelPermissionsOptsType] :: ChannelPermissionsOpts -> ChannelPermissionsOptsType

-- | 
--   <a>https://discord.com/developers/docs/resources/channel#group-dm-add-recipient</a>
data GroupDMAddRecipientOpts
GroupDMAddRecipientOpts :: UserId -> Text -> Text -> GroupDMAddRecipientOpts
[groupDMAddRecipientUserToAdd] :: GroupDMAddRecipientOpts -> UserId
[groupDMAddRecipientUserToAddNickName] :: GroupDMAddRecipientOpts -> Text
[groupDMAddRecipientGDMJoinAccessToken] :: GroupDMAddRecipientOpts -> Text
data ChannelPermissionsOptsType
ChannelPermissionsOptsUser :: ChannelPermissionsOptsType
ChannelPermissionsOptsRole :: ChannelPermissionsOptsType
instance Discord.Internal.Rest.Prelude.Request (Discord.Internal.Rest.Channel.ChannelRequest a)
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Channel.ChannelPermissionsOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Channel.ChannelPermissionsOptsType
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Channel.ModifyChannelOpts
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Channel.ChannelInviteOpts
instance Data.Default.Class.Default Discord.Internal.Rest.Channel.MessageDetailedOpts
instance Data.Default.Class.Default Discord.Internal.Rest.Channel.AllowedMentions
instance Data.Aeson.Types.ToJSON.ToJSON Discord.Internal.Rest.Channel.AllowedMentions


-- | Provides a higher level interface to the rest functions. Preperly
--   writes to the rate-limit loop. Creates separate MVars for each call
module Discord.Internal.Rest
type DiscordHandleRestChan = Chan (String, JsonRequest, MVar (Either RestCallInternalException ByteString))
class Request a
majorRoute :: Request a => a -> String
jsonRequest :: Request a => a -> JsonRequest

-- | Execute a request blocking until a response is received
writeRestCall :: (Request (r a), FromJSON a) => DiscordHandleRestChan -> r a -> IO (Either RestCallInternalException a)

-- | Starts the http request thread. Please only call this once
startRestThread :: Auth -> Chan Text -> IO (DiscordHandleRestChan, ThreadId)
data RestCallInternalException
RestCallInternalErrorCode :: Int -> ByteString -> ByteString -> RestCallInternalException
RestCallInternalNoParse :: String -> ByteString -> RestCallInternalException
RestCallInternalHttpException :: HttpException -> RestCallInternalException


-- | Provides logic code for interacting with the Discord websocket
--   gateway. Realistically, this is probably lower level than most people
--   will need
module Discord.Internal.Gateway.EventLoop
data GatewayException
GatewayExceptionCouldNotConnect :: Text -> GatewayException
GatewayExceptionEventParseError :: Text -> Text -> GatewayException
GatewayExceptionUnexpected :: GatewayReceivable -> Text -> GatewayException
GatewayExceptionConnection :: ConnectionException -> Text -> GatewayException
data ConnLoopState
ConnStart :: ConnLoopState
ConnClosed :: ConnLoopState
ConnReconnect :: Auth -> Text -> Integer -> ConnLoopState

-- | Securely run a connection IO action. Send a close on exception
connect :: (Connection -> IO a) -> IO a
type DiscordHandleGateway = (Chan (Either GatewayException Event), Chan GatewaySendable, IORef (Maybe UpdateStatusOpts))
connectionLoop :: Auth -> DiscordHandleGateway -> Chan Text -> IO ()
getPayloadTimeout :: Connection -> Int -> Chan Text -> IO (Either ConnectionException GatewayReceivable)
getPayload :: Connection -> Chan Text -> IO (Either ConnectionException GatewayReceivable)
heartbeat :: Chan GatewaySendable -> Int -> IORef Integer -> IO ()
setSequence :: IORef Integer -> Integer -> IO ()

-- | What we need to start an event stream
data ConnectionData
ConnData :: Connection -> Text -> Auth -> Chan (Either GatewayException Event) -> ConnectionData
[connection] :: ConnectionData -> Connection
[connSessionID] :: ConnectionData -> Text
[connAuth] :: ConnectionData -> Auth
[connChan] :: ConnectionData -> Chan (Either GatewayException Event)
startEventStream :: ConnectionData -> Int -> Integer -> Chan GatewaySendable -> IORef (Maybe UpdateStatusOpts) -> Chan Text -> IO ConnLoopState
eventStream :: ConnectionData -> IORef Integer -> Int -> Chan GatewaySendable -> IORef Bool -> Chan Text -> IO ConnLoopState
data Sendables
Sendables :: Chan GatewaySendable -> Chan GatewaySendable -> IORef Bool -> IORef (Maybe UpdateStatusOpts) -> Chan Text -> Sendables

-- | Things the user wants to send. Doesn't reset on reconnect
[sendchan] :: Sendables -> Chan GatewaySendable

-- | Things the library needs to send. Resets to empty on reconnect
[gatewaySends] :: Sendables -> Chan GatewaySendable

-- | If we're really authenticated yet
[startSendingUser] :: Sendables -> IORef Bool

-- | the last sent status
[sendslastStatus] :: Sendables -> IORef (Maybe UpdateStatusOpts)

-- | Log
[sendlog] :: Sendables -> Chan Text
sendableLoop :: Connection -> Sendables -> IO ()
instance GHC.Show.Show Discord.Internal.Gateway.EventLoop.GatewayException
instance GHC.Show.Show Discord.Internal.Gateway.EventLoop.ConnLoopState


-- | Query info about connected Guilds and Channels
module Discord.Internal.Gateway.Cache
data Cache
Cache :: User -> Map ChannelId Channel -> Map GuildId (Guild, GuildInfo) -> Map ChannelId Channel -> Cache
[_currentUser] :: Cache -> User
[_dmChannels] :: Cache -> Map ChannelId Channel
[_guilds] :: Cache -> Map GuildId (Guild, GuildInfo)
[_channels] :: Cache -> Map ChannelId Channel
type DiscordHandleCache = (Chan (Either GatewayException Event), MVar (Either (Cache, GatewayException) Cache))
cacheLoop :: DiscordHandleCache -> Chan Text -> IO ()
adjustCache :: Cache -> Event -> Cache
setChanGuildID :: GuildId -> Channel -> Channel
instance GHC.Show.Show Discord.Internal.Gateway.Cache.Cache


-- | Provides a rather raw interface to the websocket events through a
--   real-time Chan
module Discord.Internal.Gateway
type DiscordHandleGateway = (Chan (Either GatewayException Event), Chan GatewaySendable, IORef (Maybe UpdateStatusOpts))
type DiscordHandleCache = (Chan (Either GatewayException Event), MVar (Either (Cache, GatewayException) Cache))
data GatewayException
GatewayExceptionCouldNotConnect :: Text -> GatewayException
GatewayExceptionEventParseError :: Text -> Text -> GatewayException
GatewayExceptionUnexpected :: GatewayReceivable -> Text -> GatewayException
GatewayExceptionConnection :: ConnectionException -> Text -> GatewayException
data Cache
Cache :: User -> Map ChannelId Channel -> Map GuildId (Guild, GuildInfo) -> Map ChannelId Channel -> Cache
[_currentUser] :: Cache -> User
[_dmChannels] :: Cache -> Map ChannelId Channel
[_guilds] :: Cache -> Map GuildId (Guild, GuildInfo)
[_channels] :: Cache -> Map ChannelId Channel
startCacheThread :: Chan Text -> IO (DiscordHandleCache, ThreadId)

-- | Create a Chan for websockets. This creates a thread that writes all
--   the received Events to the Chan
startGatewayThread :: Auth -> DiscordHandleCache -> Chan Text -> IO (DiscordHandleGateway, ThreadId)

-- | Authorization token for the Discord API
data Auth

-- | Represents possible events sent by discord. Detailed information can
--   be found at <a>https://discord.com/developers/docs/topics/gateway</a>.
data Event
data GatewaySendable

module Discord.Handle
data DiscordHandle
DiscordHandle :: DiscordHandleRestChan -> DiscordHandleGateway -> DiscordHandleCache -> [DiscordHandleThreadId] -> Chan Text -> MVar Text -> DiscordHandle
[discordHandleRestChan] :: DiscordHandle -> DiscordHandleRestChan
[discordHandleGateway] :: DiscordHandle -> DiscordHandleGateway
[discordHandleCache] :: DiscordHandle -> DiscordHandleCache
[discordHandleThreads] :: DiscordHandle -> [DiscordHandleThreadId]
[discordHandleLog] :: DiscordHandle -> Chan Text
[discordHandleLibraryError] :: DiscordHandle -> MVar Text

-- | Thread Ids marked by what type they are
data DiscordHandleThreadId
DiscordHandleThreadIdRest :: ThreadId -> DiscordHandleThreadId
DiscordHandleThreadIdCache :: ThreadId -> DiscordHandleThreadId
DiscordHandleThreadIdLogger :: ThreadId -> DiscordHandleThreadId
DiscordHandleThreadIdGateway :: ThreadId -> DiscordHandleThreadId

module Discord
runDiscord :: RunDiscordOpts -> IO Text

-- | Execute one http request and get a response
restCall :: (FromJSON a, Request (r a)) => r a -> DiscordHandler (Either RestCallErrorCode a)

-- | Send a GatewaySendable, but not Heartbeat, Identify, or Resume
sendCommand :: GatewaySendable -> DiscordHandler ()

-- | Access the current state of the gateway cache
readCache :: DiscordHandler Cache

-- | Stop all the background threads
stopDiscord :: DiscordHandler ()
type DiscordHandler = ReaderT DiscordHandle IO
data DiscordHandle
data Cache
Cache :: User -> Map ChannelId Channel -> Map GuildId (Guild, GuildInfo) -> Map ChannelId Channel -> Cache
[_currentUser] :: Cache -> User
[_dmChannels] :: Cache -> Map ChannelId Channel
[_guilds] :: Cache -> Map GuildId (Guild, GuildInfo)
[_channels] :: Cache -> Map ChannelId Channel
data RestCallErrorCode
RestCallErrorCode :: Int -> Text -> Text -> RestCallErrorCode
data RunDiscordOpts
RunDiscordOpts :: Text -> DiscordHandler () -> IO () -> (Event -> DiscordHandler ()) -> (Text -> IO ()) -> Bool -> RunDiscordOpts
[discordToken] :: RunDiscordOpts -> Text
[discordOnStart] :: RunDiscordOpts -> DiscordHandler ()
[discordOnEnd] :: RunDiscordOpts -> IO ()
[discordOnEvent] :: RunDiscordOpts -> Event -> DiscordHandler ()
[discordOnLog] :: RunDiscordOpts -> Text -> IO ()
[discordForkThreadForEvents] :: RunDiscordOpts -> Bool

-- | A type that can be converted from JSON, with the possibility of
--   failure.
--   
--   In many cases, you can get the compiler to generate parsing code for
--   you (see below). To begin, let's cover writing an instance by hand.
--   
--   There are various reasons a conversion could fail. For example, an
--   <a>Object</a> could be missing a required key, an <a>Array</a> could
--   be of the wrong size, or a value could be of an incompatible type.
--   
--   The basic ways to signal a failed conversion are as follows:
--   
--   <ul>
--   <li><a>fail</a> yields a custom error message: it is the recommended
--   way of reporting a failure;</li>
--   <li><a>empty</a> (or <a>mzero</a>) is uninformative: use it when the
--   error is meant to be caught by some <tt>(<a>&lt;|&gt;</a>)</tt>;</li>
--   <li><a>typeMismatch</a> can be used to report a failure when the
--   encountered value is not of the expected JSON type; <a>unexpected</a>
--   is an appropriate alternative when more than one type may be expected,
--   or to keep the expected type implicit.</li>
--   </ul>
--   
--   <a>prependFailure</a> (or <a>modifyFailure</a>) add more information
--   to a parser's error messages.
--   
--   An example type and instance using <a>typeMismatch</a> and
--   <a>prependFailure</a>:
--   
--   <pre>
--   -- Allow ourselves to write <a>Text</a> literals.
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   data Coord = Coord { x :: Double, y :: Double }
--   
--   instance <a>FromJSON</a> Coord where
--       <a>parseJSON</a> (<a>Object</a> v) = Coord
--           <a>&lt;$&gt;</a> v <a>.:</a> "x"
--           <a>&lt;*&gt;</a> v <a>.:</a> "y"
--   
--       -- We do not expect a non-<a>Object</a> value here.
--       -- We could use <a>empty</a> to fail, but <a>typeMismatch</a>
--       -- gives a much more informative error message.
--       <a>parseJSON</a> invalid    =
--           <a>prependFailure</a> "parsing Coord failed, "
--               (<a>typeMismatch</a> "Object" invalid)
--   </pre>
--   
--   For this common case of only being concerned with a single type of
--   JSON value, the functions <a>withObject</a>, <a>withScientific</a>,
--   etc. are provided. Their use is to be preferred when possible, since
--   they are more terse. Using <a>withObject</a>, we can rewrite the above
--   instance (assuming the same language extension and data type) as:
--   
--   <pre>
--   instance <a>FromJSON</a> Coord where
--       <a>parseJSON</a> = <a>withObject</a> "Coord" $ \v -&gt; Coord
--           <a>&lt;$&gt;</a> v <a>.:</a> "x"
--           <a>&lt;*&gt;</a> v <a>.:</a> "y"
--   </pre>
--   
--   Instead of manually writing your <a>FromJSON</a> instance, there are
--   two options to do it automatically:
--   
--   <ul>
--   <li><a>Data.Aeson.TH</a> provides Template Haskell functions which
--   will derive an instance at compile time. The generated instance is
--   optimized for your type so it will probably be more efficient than the
--   following option.</li>
--   <li>The compiler can provide a default generic implementation for
--   <a>parseJSON</a>.</li>
--   </ul>
--   
--   To use the second, simply add a <tt>deriving <a>Generic</a></tt>
--   clause to your datatype and declare a <a>FromJSON</a> instance for
--   your datatype without giving a definition for <a>parseJSON</a>.
--   
--   For example, the previous example can be simplified to just:
--   
--   <pre>
--   {-# LANGUAGE DeriveGeneric #-}
--   
--   import <a>GHC.Generics</a>
--   
--   data Coord = Coord { x :: Double, y :: Double } deriving <a>Generic</a>
--   
--   instance <a>FromJSON</a> Coord
--   </pre>
--   
--   The default implementation will be equivalent to <tt>parseJSON =
--   <a>genericParseJSON</a> <a>defaultOptions</a></tt>; if you need
--   different options, you can customize the generic decoding by defining:
--   
--   <pre>
--   customOptions = <a>defaultOptions</a>
--                   { <a>fieldLabelModifier</a> = <a>map</a> <a>toUpper</a>
--                   }
--   
--   instance <a>FromJSON</a> Coord where
--       <a>parseJSON</a> = <a>genericParseJSON</a> customOptions
--   </pre>
class FromJSON a

-- | The default value for this type.
def :: Default a => a
instance GHC.Classes.Ord Discord.RestCallErrorCode
instance GHC.Classes.Eq Discord.RestCallErrorCode
instance GHC.Show.Show Discord.RestCallErrorCode
instance Data.Default.Class.Default Discord.RunDiscordOpts

module Discord.Requests

module Discord.Types
